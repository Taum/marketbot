generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UniqueInfo {
  id            Int     @id @default(autoincrement())
  ref           String
  faction       String?
  cardSet       String?
  mainCost      Int?
  recallCost    Int?
  oceanPower    Int?
  mountainPower Int?
  forestPower   Int?
  nameEn        String?
  imageUrlEn    String?
  imageUrlDe    String?
  imageUrlEs    String?
  imageUrlFr    String?
  imageUrlIt    String?
  mainEffectEn  String?
  echoEffectEn  String?

  fetchedDetails Boolean @default(false)
  fetchedDetailsAt DateTime?

  firstSeenGenerationId Int?
  lastSeenGenerationId  Int?
  lastSeenInSaleAt      DateTime?
  lastSeenInSalePrice   Decimal?

  // This is the short unique ID of the "family" e.g. LY_14
  // Note that Out-of-faction uniques will have the same family ID as the in-faction
  cardFamilyId String?

  mainAbilities MainUniqueAbility[]

  @@unique([id])
  @@unique([ref])
  @@index([id])
  @@index([ref])
  @@index([cardFamilyId])
  @@index([lastSeenInSaleAt])
  @@index([nameEn])
}

model MainUniqueAbility {
  id           Int        @id @default(autoincrement())
  uniqueInfoId Int
  uniqueInfo   UniqueInfo @relation(fields: [uniqueInfoId], references: [id])
  lineNumber   Int

  textEn String

  genericTrigger     GenericTriggerType?
  triggerId          Int?
  trigger            MainUniqueAbilityPart? @relation("trigger", fields: [triggerId], references: [id])
  triggerConditionId Int?
  triggerCondition   MainUniqueAbilityPart? @relation("triggerCondition", fields: [triggerConditionId], references: [id])
  conditionId        Int?
  condition          MainUniqueAbilityPart? @relation("condition", fields: [conditionId], references: [id])
  effectId           Int?
  effect             MainUniqueAbilityPart? @relation("effect", fields: [effectId], references: [id])

  @@unique([id])
  @@unique([uniqueInfoId, lineNumber])
  @@index([id])
  @@index([uniqueInfoId, lineNumber])
}

model MainUniqueAbilityPart {
  id     Int    @id @default(autoincrement())
  textEn String

  partType AbilityPartType

  triggerFor          MainUniqueAbility[] @relation("trigger")
  triggerConditionFor MainUniqueAbility[] @relation("triggerCondition")
  conditionFor        MainUniqueAbility[] @relation("condition")
  effectFor           MainUniqueAbility[] @relation("effect")

  @@unique([id])
  @@unique([textEn, partType])
  @@index([id])
  @@index([textEn])
}

// This will be a singleton entry
model MarketUpdateStats {
  generationId Int @id @default(autoincrement())

  updateStartedAt   DateTime
  updateCompletedAt DateTime?

  newCardsAdded      Int?
  totalOffersUpdated Int?
  totalPagesLoaded   Int?

  @@unique([generationId])
  @@index([generationId])
}

model CardFamilyStats {
  id           Int    @id @default(autoincrement())
  name         String
  cardFamilyId String
  faction      String

  fetchStartedAt           DateTime?
  fetchCompletedAt         DateTime?
  fetchStartGeneration     Int
  fetchCompletedGeneration Int?
  totalItems               Int?

  @@unique([id])
  @@unique([cardFamilyId, faction])
  @@index([id])
  @@index([cardFamilyId, faction])
}

model AltggSession {
  id             Int       @id @default(autoincrement())
  name           String
  accessToken    String?
  expiresAt      DateTime?
  userId         String?
  refreshCookies Json?

  @@unique([id])
  @@index([id])
}

enum GenericTriggerType {
  FromHand
  FromReserve
  FromAnwhere
}

enum AbilityPartType {
  Trigger
  TriggerCondition
  Condition
  Effect
}
