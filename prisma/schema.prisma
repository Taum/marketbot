generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

generator kysely {
    provider = "prisma-kysely"

    // Optionally provide a destination directory for the generated file
    // and a filename of your choice
    output = "../generated/kysely-db"
    fileName = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UniqueInfo {
  id            Int     @id @default(autoincrement())
  ref           String
  faction       String?
  cardSet       String?
  mainCost      Int?
  recallCost    Int?
  oceanPower    Int?
  mountainPower Int?
  forestPower   Int?
  nameEn        String?
  imageUrlEn    String?
  imageUrlDe    String?
  imageUrlEs    String?
  imageUrlFr    String?
  imageUrlIt    String?

  mainEffectEn  String? // Indexed for full text search managed outside of Prisma
  echoEffectEn  String? // Indexed for full text search managed outside of Prisma
  cardSubTypes  String[]

  fetchedDetails   Boolean   @default(false)
  fetchedDetailsAt DateTime?

  firstSeenGenerationId Int?
  lastSeenGenerationId  Int?
  lastSeenInSaleAt      DateTime?
  /// @kyselyType(number)
  lastSeenInSalePrice   Decimal?

  seenInLastGeneration Boolean @default(false)

  // This is the short unique ID of the "family" e.g. LY_14
  // Note that Out-of-faction uniques will have the same family ID as the in-faction
  cardFamilyId String?
  cardFamilyStats CardFamilyStats? @relation(fields: [cardFamilyId, faction], references: [cardFamilyId, faction])

  mainAbilities UniqueAbilityLine[]

  @@unique([id])
  @@unique([ref])
  @@index([id])
  @@index([ref])
  @@index([cardSet])
  @@index([cardFamilyId])
  @@index([nameEn])
  @@index([seenInLastGeneration])
  @@index([lastSeenInSalePrice])
  @@index([cardSubTypes]) // GIN index
}

model UniqueAbilityLine {
  id            Int        @id @default(autoincrement())
  uniqueInfoId  Int
  uniqueInfo    UniqueInfo @relation(fields: [uniqueInfoId], references: [id])
  lineNumber    Int
  isSupport     Boolean
  
  /// @kyselyType(JsonValue)
  characterData Json?

  textEn String

  allParts AbilityPartLink[]

  @@unique([id])
  @@unique([uniqueInfoId, lineNumber, isSupport])
  @@index([id])
  @@index([uniqueInfoId, lineNumber, isSupport])
  // @@index([isSupport])
}

model AbilityPartLink {
  id Int @id @default(autoincrement())

  partId Int
  part UniqueAbilityPart @relation(fields: [partId], references: [id])
  abilityId Int
  ability UniqueAbilityLine @relation(fields: [abilityId], references: [id])

  partType AbilityPartType

  @@unique([id])
  @@unique([partId, abilityId])

  @@index([partId])
  @@index([abilityId])
}

model UniqueAbilityPart {
  id     Int    @id @default(autoincrement())
  textEn String

  partType  AbilityPartType
  isSupport Boolean

  allAbilities AbilityPartLink[]

  @@unique([id])
  @@unique([textEn, partType, isSupport])
  @@index([id])
  @@index([textEn])
}

// This will be a singleton entry
model MarketUpdateStats {
  generationId Int @id @default(autoincrement())

  updateStartedAt   DateTime
  updateCompletedAt DateTime?

  newCardsAdded      Int?
  totalOffersUpdated Int?
  totalPagesLoaded   Int?

  @@unique([generationId])
  @@index([generationId])
}

model CardFamilyStats {
  id           Int    @id @default(autoincrement())
  name         String
  cardFamilyId String
  faction      String

  fetchStartedAt           DateTime?
  fetchCompletedAt         DateTime?
  fetchStartGeneration     Int
  fetchCompletedGeneration Int?
  totalItems               Int?

  uniques UniqueInfo[]

  @@unique([id])
  @@unique([cardFamilyId, faction])
  @@index([id])
  @@index([cardFamilyId, faction])
}

model AltggSession {
  id             Int       @id @default(autoincrement())
  name           String
  accessToken    String?
  expiresAt      DateTime?
  userId         String?
  refreshCookies Json?

  @@unique([id])
  @@index([id])
}

enum AbilityPartType {
  Trigger
  Condition
  Effect
  ExtraEffect
}
